install.packages("swirl")
install.packages("lmtest")
library(lmtest)
dwtest(reg, alternative= "two.sided")
bptest(reg)
ks.test(rstandard(reg), "pnorm")
Data <- read.table(file.choose(), header=T)
Data <- read.table(file.choose(), header=T)
attach(Data)
plot(Lat, Mort)
text(Lat, Mort, State, cex=0.4, pos=4)
Data
abline(h = 0)
abline(h = -2, lty =2)
abline(h = 2, lty =2)
abline(reg)
plot(Lat, Mort)
text(Lat, Mort, State, cex=0.4, pos=4)
reg = lm(Mort~Lat)
summary(reg)
abline(reg)
predict(reg)
predict(reg)
resid(reg)
abline(h = 0)
abline(h = -2, lty =2)
# make a vector
ca <- c("Karen", "Dave" )
# sample(ca, 1)
set.seed(1000)
sample(ca, 1)
names()
Data
attach(Data)
names
colnames()
data.frame()
head(DF,10)
names(Data)[2]<-paste("x")
names(Data)[1]<-paste("y")
data
View(data)
library("tidyr")
library("dplyr")
library("tidyr")
library("dplyr")
DF1 = data.frame("swirl-data.csv")
View(DF1)
DF1 = read.csv("swirl-data.csv")
View(DF1)
?read.csv()
?select()
?as_tibble()
DF2 = select(DF1, "hash", "lesson_name", "attept")
DF2 = select(DF1, "hash", "lesson_name", "attempt")
View(DF2)
head(DF, 10)
?DF
?head()
head(DF1,10)
tail(DF1,10)
?as.numeric()
as.numeric(DF1 $ course_name)
as.numeric(DF1)
as.numeric(DF1,20)
as.character(DF1$course_name)
as.data.frame(DF1)
gather_(col)
gather_cols
gather(col)
gather(col())
DF3 =  DF2 %>% group_by(hash, lesson_name) %>% summarise(attempt = sum(attempt))
View(DF3)
DF3b = tidyr::spread(DF3, lesson_name, attempt)
View(DF3b)
DF4 = select(DF1, hash, lesson_name, correct)
View(DF4)
DF4$correct <- ifelse(DF4$correct == TRUE, 1,
ifelse(DF4$correct == NA, NA, 0))
DF4 = select(DF1, hash, correct)
View(DF4)
DF4$correct <- ifelse(DF4$correct == TRUE, 1,
ifelse(DF4$correct == FALSE, NA, 0))
DF4$correct <- ifelse(DF4$correct == TRUE, 1,
ifelse(DF4$correct == FALSE, 0))
DF4$correct <- ifelse(DF4$correct == TRUE, 1,
ifelse(DF4$correct == FALSE,NA,0))
?mean.correct
DF5 <- DF4 %>% group_by(hash, lesson_name) %>% summarise(mean.correct = mean(correct, na.rm = TRUE))
DF4 = select(DF1, hash,lesson_name, correct)
DF5 <- DF4 %>% group_by(hash, lesson_name) %>% summarise(mean.correct = mean(correct, na.rm = TRUE))
DF4$correct <- ifelse(DF4$correct == TRUE, 1,
ifelse(DF4$correct == NA,NA,0))
DF5 <- DF4 %>% group_by(hash, lesson_name) %>% summarise(mean.correct = mean(correct, na.rm = TRUE))
?na.rm
?gap
?plot
?hist
t8.16= read.table("http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%20%208%20Data%20Sets/CH08PR16.txt")
names(t8.16)[1]<-paste("X1")
t1.19 = read.table("http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%20%201%20Data%20Sets/CH01PR19.txt")
data = cbind(t1.19, t8.16)
names(data)[1]<-paste("GPA")
names(data)[2]<-paste("ACT")
names(data)[3]<-paste("Major")
summary(lm(GPA ~ACT+Major))
attach(data)
summary(lm(GPA ~ACT+Major))
reg12 = lm(GPA ~ACT+Major)
reg1 = lm(GPA ~ACT)
f = (anova(reg1)[2,2] - anova(reg12)[3,2]) / (anova(reg12)[3,2] / (120-3))
F = qf(0.99,1,120-3)
qplot(x = residuals(reg12), y = ACT * Major, main ="the residual vs. X1X2",xlab = "Residuals", ylab = "ACT * Major")
?qplot
??qplot
ggplot2::qplot(x = residuals(reg12), y = ACT * Major, main ="the residual vs. X1X2",xlab = "Residuals", ylab = "ACT * Major")
summary(lm(GPA ~ ACT + Major + ACT*Major))
anova(reg12)[3,2]
intfit = lm(GPA ~ ACT + Major + ACT*Major)
reg122 lm(GPA ~ ACT + Major + ACT*Major)
reg122 = lm(GPA ~ ACT + Major + ACT*Major)
intfit
deviance(reg122)
deviance(reg12)
anova(reg12)[3,2]
anova(reg122)
anova(reg122)[4,2]
anova(reg12)[3,2]-anova(reg122)[4,2]
120-3-(120-summary(intfit)$df[1])
deviance(reg122)
summary(intfit)$df[1]
120-4
anova(reg122)[4,2] /(120-4)
2.071257/ 0.3750486
f = (anova(reg12)[3,2]-anova(reg122)[4,2]) / (anova(reg122)[4,2]/(120-4))
f
F = qf(0.95,1,120-4)
F
#Load data
DF1 <- read.csv("cluster.csv", header = TRUE)
#Load data
DF1 <- read.csv("HUDK405018-cluster.csv", header = TRUE)
#Wrangle data
DF1 <- DF1[3,]
#Load data
DF1 <- read.csv("HUDK405018-cluster.csv", header = TRUE)
#Wrangle data
DF1 <- DF1[3,]
View(DF1)
install.packages("ggmap")
library(ggmap)
#Request lattitude and longitude from Google Maps API
DF2 <- geocode(as.character(DF1$Q1_1), output = "latlon", source = "dsk")
fit <- kmeans(LL, 1)
DF3 <- data.frame(LL, fit$cluster)
install.packages("klaR")
df
?df
View(DF1)
View(DF2)
View(DF1)
read.csv(~/HUDK4050/class-activity-6/HUDK405018-cluster.csv)
read.csv("~/HUDK4050/class-activity-6/HUDK405018-cluster.csv")
?kmodes
??kmodes
install.packages("igraph")
library(igraph)
g <- sample_gnp(10, 0.5, directed = FALSE, loops = FALSE)
g
D1 = read.csv("discipline-data.csv")
D1$stid <- as.factor(D1$stid)
library(dplyr)
D2 <- dplyr::select(D1, tid, stid)
EDGE <- dplyr::count(D2, tid, stid)
names(EDGE) <- c("from", "to", "count")
#First we will separate the teachers from our original data frame
V.TCH <- dplyr::select(D1, tid, t.gender, t.expertise)
#Remove all the repeats so that we just have a list of each teacher and their characteristics
V.TCH <- unique(V.TCH)
#Add a variable that describes that they are teachers
V.TCH$group <- "teacher"
#Now repeat this process for the students
V.STD <- dplyr::select(D1, stid, s.gender, s.major)
V.STD <- unique(V.STD)
V.STD$group <- "student"
#Make sure that the student and teacher data frames have the same variables names
names(V.TCH) <- c("id", "gender", "topic", "group")
names(V.STD) <- c("id", "gender", "topic", "group")
#Bind the two data frames together (you will get a warning because the teacher data frame has 5 types of id (A,B,C,D,E) and the student has 25 (1-30), this isn't a problem)
VERTEX <- dplyr::bind_rows(V.TCH, V.STD)
#Load the igraph package
library(igraph)
#First we will make an object that contains the graph information using our two dataframes EDGE and VERTEX. Notice that we have made "directed = TRUE" - our graph is directed since discipline is being given from a teacher to a student.
g <- graph.data.frame(EDGE, directed=TRUE, vertices=VERTEX)
g
#Now we can plot our graph using the force directed graphing technique - our old friend Fruchertman-Reingold!
plot(g,layout=layout.fruchterman.reingold)
#There are many ways to change the attributes of the graph to represent different characteristics of the newtork. For example, we can color the nodes according to gender.
plot(g,layout=layout.fruchterman.reingold, vertex.color=VERTEX$gender)
#We can change the thickness of the edge according to the number of times a particular teacher has sent a particular student to the principal.
plot(g,layout=layout.fruchterman.reingold, vertex.color=VERTEX$gender, edge.width=EDGE$count)
install.packages("igraph")
library(igraph)
install.packages("igraph")
g <- sample_gnp(10, 0.5, directed = FALSE, loops = FALSE)
D1 = read.csv("discipline-data.csv")
D1$stid <- as.factor(D1$stid)
library(dplyr)
D2 <- dplyr::select(D1, tid, stid)
EDGE <- dplyr::count(D2, tid, stid)
names(EDGE) <- c("from", "to", "count")
#First we will separate the teachers from our original data frame
V.TCH <- dplyr::select(D1, tid, t.gender, t.expertise)
#Remove all the repeats so that we just have a list of each teacher and their characteristics
V.TCH <- unique(V.TCH)
#Add a variable that describes that they are teachers
V.TCH$group <- "teacher"
#Now repeat this process for the students
V.STD <- dplyr::select(D1, stid, s.gender, s.major)
V.STD <- unique(V.STD)
V.STD$group <- "student"
#Make sure that the student and teacher data frames have the same variables names
names(V.TCH) <- c("id", "gender", "topic", "group")
names(V.STD) <- c("id", "gender", "topic", "group")
#Bind the two data frames together (you will get a warning because the teacher data frame has 5 types of id (A,B,C,D,E) and the student has 25 (1-30), this isn't a problem)
VERTEX <- dplyr::bind_rows(V.TCH, V.STD)
#Load the igraph package
library(igraph)
#First we will make an object that contains the graph information using our two dataframes EDGE and VERTEX. Notice that we have made "directed = TRUE" - our graph is directed since discipline is being given from a teacher to a student.
g <- graph.data.frame(EDGE, directed=TRUE, vertices=VERTEX)
g
#Now we can plot our graph using the force directed graphing technique - our old friend Fruchertman-Reingold!
plot(g,layout=layout.fruchterman.reingold)
#There are many ways to change the attributes of the graph to represent different characteristics of the newtork. For example, we can color the nodes according to gender.
plot(g,layout=layout.fruchterman.reingold, vertex.color=VERTEX$gender)
#We can change the thickness of the edge according to the number of times a particular teacher has sent a particular student to the principal.
plot(g,layout=layout.fruchterman.reingold, vertex.color=VERTEX$gender, edge.width=EDGE$count)
View(D1)
library(readr)
HUDK405018_cluster <- read_csv("HUDK4050/class-activity-6/HUDK405018-cluster.csv")
View(HUDK405018_cluster)
library(dplyr)
library(tidyr)
S.SUM <- EDGE %>% group_by(to) %>% summarise(sum(count))
names(S.SUM) <- c("id","count")
T.SUM <- EDGE %>% group_by(from) %>% summarise(sum(count))
names(T.SUM) <- c("id","count")
SUM <- bind_rows(T.SUM, S.SUM)
VERTEX <- full_join(VERTEX, SUM, by = "id")
g <- graph.data.frame(EDGE, directed=TRUE, vertices=VERTEX)
plot(g,layout=layout.fruchterman.reingold,
vertex.color=as.factor(VERTEX$gender),
edge.arrow.size = 0.5,
edge.width=EDGE$count,
vertex.size = VERTEX$count*2)
View(VERTEX)
View(V.TCH)
View(V.STD)
View(SUM)
DF3 <- data.frame(LL, fit$cluster)
plot(g,layout=layout.fruchterman.reingold, vertex.color=VERTEX$gender, edge.width=EDGE$count)
D1 = read.csv("discipline-data.csv")
install.packages("igraph")
library()
library(ggmap)
K1 <- read.csv("Class_Motivation.csv")
K3 <- na.omit(K2) #This command create a data frame with only those people with no missing values. It "omits" all rows with missing values, also known as a "listwise deletion". EG - It runs down the list deleting rows as it goes.
library(tidyr)
library(dplyr)
install.packages("ggplot2", lib="/data/Rpackages/")
install.packages("ggplot2", lib = "/data/Rpackages/")
K2 <- dplyr::select(K1, 2:6)
K2 <- dplyr::select(K1, 2:6)
K3 <- na.omit(K2) #This command create a data frame with only those people with no missing values. It "omits" all rows with missing values, also known as a "listwise deletion". EG - It runs down the list deleting rows as it goes.
library()
library(ggmap)
install.packages("ggplot2", lib="/data/Rpackages/")
install.packages("ggplot2", lib = "/data/Rpackages/")
K6 <- K5 %>% group_by (week, cluster)
library(tidyr)
library(dplyr)
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
K4 = data.frame(K3,fit$cluster)
fit <- kmeans(K3,2)
K4 = data.frame(K3,fit$cluster)
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
K6 <- K5 %>% group_by (week, cluster)
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
K6 <- summarise(K6, avg = mean(motivation))
K1 <- read.csv("Class_Motivation.csv")
K2 <- dplyr::select(K1, 2:6)
K3 <- na.omit(K2) #This command create a data frame with only those people with no missing values. It "omits" all rows with missing values, also known as a "listwise deletion". EG - It runs down the list deleting rows as it goes.
K3 <- scale(K3)
fit <- kmeans(K3,2)
K4 = data.frame(K3,fit$cluster)
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
K6 <- K5 %>% group_by (week, cluster)
View(K5)
View(K4)
View(K3)
View(K2)
View(K1)
View(K4)
K6$week <- as.numeric(K6$week)
names(K4) = c("1", "2", "3", "4", "5", "cluster")
K5 <- tidyr::gather(K4, "week", "motivation", 1:5)
K6 <- K5 %>% group_by (week, cluster)
K6 <- summarise(K6, avg = mean(motivation))
K6$week <- as.numeric(K6$week)
K6$cluster <- as.factor(K6$cluster)
D1 = read.csv("HUDK405018-cluster.csv")
View(D1)
View(K6)
View(K1)
View(D1)
names(D1)
D2 = dplyr::select(D1,14:15)
D3 = dplyr::select(D1,18:26)
View(D2)
View(D2)
View(D3)
View(K2)
D4 = na.omit(D2)
D1 = read.csv("HUDK405018-cluster.csv", header = T)
names(DF1) <- c("duration", "firstName", "lastName", "Cat", "giff", "monNYC", "numSib", "weekSport", "mileTotc", "numfriendAndroid", "numMovie", "classSemester", "statesVisited", "cityGrow", "stateGrow", "countryGrow" )
DF1 = read.csv("HUDK405018-cluster.csv", header = T)
names(DF1)
View(DF1)
names(DF1) <- c("duration", "firstName", "lastName", "Cat", "giff", "monNYC", "numSib", "weekSport", "mileTotc", "numfriendAndroid", "numMovie", "classSemester", "statesVisited", "cityGrow", "stateGrow", "countryGrow" )
DF1Q <- dplyr::select(DF1, 4:13)
DF1Q <- dplyr::select(DF1, 4:13)
DF1R <- dplyr::select(DF1, 14:16)
fit2 <- kmeans(K3, 3)
fit2$cluster
D4 <- data.frame(K3, fit2$cluster)
names(D4) <- c("1", "2", "3", "4", "5", "cluster")
D5 <- tidyr::gather(D4, "week", "motivation", 1:5)
D6 <- summarise(D6, avg = mean(motivation))
D6 <- D5 %>% group_by(week, cluster)
D6 <- summarise(D6, avg = mean(motivation))
D6$week <- as.numeric(D6$week)
D6$cluster <- as.factor(D6$cluster)
ggplot(D6, aes(week, avg, colour = cluster)) + geom_line() + xlab("Week") + ylab("Average Motivation")
D7 <- dplyr::count(D4, cluster)
library(rpart)
#Upload the data sets MOOC1.csv and MOOC2.csv
M1 <- read.csv("MOOC1.csv", header = TRUE)
M2 <- read.csv("MOOC2.csv", header = TRUE)
c.tree1 <- rpart(certified~forum.posts+grade+assignment,method='class',data=M1)
post(c.tree1, file = "tree1.ps", title = "MOOC") #This creates a pdf image of the tree
c.tree2 <- prune(c.tree1, cp = 0.08 )#Set cp to the level at which you want the tree to end
post(c.tree2, file = "tree2.ps", title = "MOOC") #This creates a pdf image of the tree
M2$predict1 <- predict(c.tree1, M2, type = "class")
M2$predict2 <- predict(c.tree2, M2, type = "class")
table(M2$certified, M2$predict1)
table(M2$certified, M2$predict2)
D1<-read.csv("/Users/abbeykeener/HUDK Assignments/Assignment 7/online.data.csv", sep=",", header=TRUE)
D1<-read.csv("online.data.csv", sep=",", header=TRUE)
#Start by creating histograms of the distributions for all variables (#HINT: look up "facet" in the ggplot documentation)
library(ggplot2)
viz1 <- ggplot(data = D1, aes(x = post.test.score)) + geom_histogram() + facet_grid(level.up ~.)
plot(viz1)
#Then visualize the relationships between variables
pairs(~post.test.score + pre.test.score + av.assignment.score + messages + forum.posts, data= D1)
#Try to capture an intution about the data and the relationships
setwd("~/HUDK4050/assignment7")
setwd("~/HUDK4050/assignment6")
